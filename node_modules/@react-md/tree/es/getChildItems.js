var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
/**
 * Gets all the child items for a specific parent item id. If the `recursive`
 * argument is enabled, all children of the items will also be returned instead
 * of only the top level items.
 *
 * @param data - Either the flattened tree data or a list of all the tree data
 * to iterate over
 * @param parentId - The parent id to get children of
 * @param recursive - Boolean if the children's children should also be returned
 * @returns a list of all the items for a specific parent item id. Note: if the
 * recursive param is enabled, the list will be ordered so that the children of
 * a item will appear before the next item at the same level. So you either need
 * to sort by `parentId` or something else if you want a specific order.
 */
export function getChildItems(data, parentId, recursive) {
    if (recursive === void 0) { recursive = false; }
    var items = Array.isArray(data) ? data : Object.values(data);
    return items.reduce(function (list, item) {
        if (parentId !== item.parentId) {
            return list;
        }
        return __spreadArray(__spreadArray(__spreadArray([], list, true), [
            item
        ], false), (recursive ? getChildItems(items, item.itemId, recursive) : []), true);
    }, []);
}
//# sourceMappingURL=getChildItems.js.map