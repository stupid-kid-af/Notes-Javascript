import { Dispatch, SetStateAction } from "react";
/**
 * @internal
 * @remarks \@since 2.8.5
 */
declare type Initializer<V extends string> = readonly V[] | (() => readonly V[]);
/**
 * The change handler for indeterminate checkboxes.
 *
 * @param values - The current list of checked values.
 * @typeParam V - The values allowed for the list of checkboxes.
 * @internal
 * @remarks \@since 2.8.5
 */
declare type OnChange<V extends string> = (values: readonly V[]) => void;
/**
 * @remarks \@since 2.8.5
 * @typeParam V - The values allowed for the list of checkboxes.
 */
export interface IndeterminateCheckedHookOptions<V extends string> {
    /**
     * Enabling this option will update the returned props to rename `onChange` to
     * `onCheckedChange` to work with the {@link MenuItemCheckbox} component.
     *
     * @defaultValue `false`
     */
    menu?: boolean;
    /**
     * This is the `useState` initializer that can be used if some checkboxes should
     * be checked by default.
     */
    onChange?: OnChange<V>;
    /**
     * The change handler for indeterminate checkboxes.
     *
     * @param values - The current list of checked values.
     */
    defaultCheckedValues?: Initializer<V>;
}
/** @remarks \@since 2.8.5 */
export interface BaseProvidedIndeterminateCheckboxProps {
    /**
     * Note: This will only be provided when the {@link indeterminate} prop is
     * `true`.
     */
    "aria-checked"?: "mixed";
    /**
     * Boolean if the root checkbox is currently checked.
     */
    checked: boolean;
    /**
     * This will be set to `true` when at least one checkbox has been checked but
     * not every checkbox to enable the {@link CheckboxProps.indeterminate} state.
     */
    indeterminate: boolean;
}
/**
 * @remarks \@since 2.8.5
 * @internal
 */
export interface ProvidedIndeterminateCheckboxProps extends BaseProvidedIndeterminateCheckboxProps {
    onChange(): void;
}
/**
 * @remarks \@since 2.8.5
 * @internal
 */
export interface ProvidedIndeterminateMenuItemCheckboxProps extends BaseProvidedIndeterminateCheckboxProps {
    onCheckedChange(): void;
}
/**
 * @remarks \@since 2.8.5
 * @internal
 */
interface ProvidedCombinedIndeterminateProps extends BaseProvidedIndeterminateCheckboxProps {
    onChange?(): void;
    onCheckedChange?(): void;
}
/**
 * @remarks \@since 2.8.5
 * @typeParam V - The values allowed for the list of checkboxes.
 */
export interface BaseProvidedIndeterminateControlledCheckboxProps<V extends string> {
    /**
     * One of the values provided to the {@link useIndeterminateChecked} hook.
     */
    value: V;
    /**
     * Boolean if the current checkbox is checked.
     */
    checked: boolean;
}
/**
 * @remarks \@since 2.8.5
 * @typeParam V - The values allowed for the list of checkboxes.
 * @internal
 */
export interface ProvidedIndeterminateControlledCheckboxProps<V extends string> extends BaseProvidedIndeterminateControlledCheckboxProps<V> {
    onChange(): void;
}
/**
 * @remarks \@since 2.8.5
 * @typeParam V - The values allowed for the list of checkboxes.
 * @internal
 */
export interface ProvidedIndeterminateControlledMenuItemCheckboxProps<V extends string> extends BaseProvidedIndeterminateControlledCheckboxProps<V> {
    onCheckedChange(): void;
}
/**
 * @remarks \@since 2.8.5
 * @typeParam V - The values allowed for the list of checkboxes.
 * @internal
 */
interface ProvidedCombinedIndeterminateControlledProps<V extends string> extends BaseProvidedIndeterminateControlledCheckboxProps<V> {
    onChange?(): void;
    onCheckedChange?(): void;
}
/**
 * @remarks \@since 2.8.5
 * @typeParam V - The values allowed for the list of checkboxes.
 */
export interface BaseIndeterminateCheckedHookReturnValue<V extends string> {
    /**
     * A list of all the values that are currently checked.
     */
    checkedValues: readonly V[];
    /**
     * A function to manually override the {@link checkedValues} if the default
     * hook's implementation does not work for your use-case.
     */
    setCheckedValues: Dispatch<SetStateAction<readonly V[]>>;
}
/**
 * @remarks \@since 2.8.5
 * @typeParam V - The values allowed for the list of checkboxes.
 * @internal
 */
interface OnChangeReturnValue<V extends string> extends BaseIndeterminateCheckedHookReturnValue<V> {
    rootProps: ProvidedIndeterminateCheckboxProps;
    getProps(value: V): ProvidedIndeterminateControlledCheckboxProps<V>;
}
/**
 * @remarks \@since 2.8.5
 * @typeParam V - The values allowed for the list of checkboxes.
 * @internal
 */
interface OnCheckedChangeReturnValue<V extends string> extends BaseIndeterminateCheckedHookReturnValue<V> {
    rootProps: ProvidedIndeterminateMenuItemCheckboxProps;
    getProps(value: V): ProvidedIndeterminateControlledMenuItemCheckboxProps<V>;
}
/**
 * @remarks \@since 2.8.5
 * @typeParam V - The values allowed for the list of checkboxes.
 * @internal
 */
export interface CombinedIndeterminateCheckedHookReturnValue<V extends string> extends BaseIndeterminateCheckedHookReturnValue<V> {
    rootProps: ProvidedCombinedIndeterminateProps;
    getProps(value: V): ProvidedCombinedIndeterminateControlledProps<V>;
}
export declare function useIndeterminateChecked<V extends string>(values: readonly V[], options?: IndeterminateCheckedHookOptions<V> & {
    menu?: false;
}): OnChangeReturnValue<V>;
export declare function useIndeterminateChecked<V extends string>(values: readonly V[], options: IndeterminateCheckedHookOptions<V> & {
    menu: true;
}): OnCheckedChangeReturnValue<V>;
export {};
